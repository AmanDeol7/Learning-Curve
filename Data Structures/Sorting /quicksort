time complexity :
best case: O(nlogn)
average case: O(nlogn);
worst case: O(n^2)



#include <stdio.h>

void swap(int *a , int *b)
{
    int temp ;
    temp = *a;
    *a = *b;
    *b = temp;

}
int partition(int arr[], int low, int high )
{
    int pivot = arr[high];
    int i , j;
    i = low - 1;
    for ( j = low; j<high+1; j++)
    {
        if(arr[j]< pivot)
        {
            i++;
            swap(&arr[i], &arr[j] );
        }


    }
    swap(&arr[i+1], &arr[high]);
    return i+1;
}

void quicksort(int arr[], int low, int high )
{
    if ( low<high)
    {
            int pi = partition(arr, low, high);
            quicksort(arr, low, pi-1);
            quicksort(arr, pi+1, high);
    }

}
int main()
{
    int arr[5] = {8,5,6,4,1};
    quicksort(arr, 0, 4);
    int  n = sizeof(arr)/sizeof(int);
    for ( int i = 0 ; i <n; i++)
    {
        printf(" %d ", arr[i]);
    }
    return 0;
}
