Insertion

Best case: O(logn)
Average case: O(logn)
Worst case: O(n)

Deletion

Best case: O(logn)
Average case: O(logn)
Worst case: O(n)

Searching

Best case: O(logn)
Average case: O(logn)
Worst case: O(n)

Space Complexity

Insertion: O(n)
Deletion: O(n)
Searching: O(n)




#include <stdio.h>
#include <stdlib.h>

struct node
{
    int data;
    struct node *left_child;
    struct node *right_child;
};

struct node *createnode(int x)
{
    struct node *temp = (struct node *)malloc(sizeof(struct node));
    temp->data = x;
    temp->left_child = NULL;
    temp->right_child = NULL;
    return temp;
}

struct node *insert(struct node *root, int x)
{
    if (root == NULL)
    {
        return createnode(x);
    }
    else if (x > root->data)
    {
        root->right_child = insert(root->right_child, x);
    }
    else
    {
        root->left_child = insert(root->left_child, x);
    }
    return root;
}
struct node *inorderPredeessor(struct node *root)
{
    root = root->left_child;
    while (root->right_child != NULL)
    {
        root = root->right_child;
    }
    return root;
}

struct node *delete(struct node *root, int x)
{
    struct node *ipre;
    if (root == NULL)
    {

        return NULL;
    }
    else if (root->left_child == NULL && root->right_child == NULL)
    {
        free(root);
        return NULL;
    }

    if (x > root->data)
    {
        root->right_child = delete (root->right_child, x);
    }
    else if (x < root->data)
    {
        root->left_child = delete (root->left_child, x);
    }
    else
    {
        ipre = inorderPredeessor(root);
        root->data = ipre->data;
        root->left_child = delete (root->left_child, ipre->data);
    }
    return root;
}
void inorder(struct node *root)
{
    if (root != NULL)
    {
        inorder(root->left_child);
        printf(" %d ", root->data);
        inorder(root->right_child);
    }
}
int count = 0;
struct node *kthSmallest(struct node *root, int k)
{
    // base case
    if (root == NULL)
        return NULL;

    // search in left subtree
    struct node *left = kthSmallest(root->left_child, k);

    // if k'th smallest is found in left subtree, return it
    if (left != NULL)
        return left;

    // if current element is k'th smallest, return it
    count++;
    if (count == k)
        return root;

    /* else search in right subtree*/
    return kthSmallest(root->right_child, k);
}

int main()
{
    struct node *root;
    root = createnode(20);
    insert(root, 5);
    insert(root, 1);
    insert(root, 15);
    inorder(root);
    delete (root, 5);
    printf("\n");
    inorder(root);
    printf("\n");
    struct node *temp = kthSmallest(root, 2);
    printf("%d", temp->data);
    return 0;
}
